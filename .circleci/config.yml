version: 2.1

orbs: 
  slack: circleci/slack@4.5.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
      id:
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: ${CIRCLE_WORKFLOW_ID:0:7} "
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      when:
        type: string
      id:
        type: string    
    steps:
      - run:
          name: Revert migrations
          command: |
            echo "revert migrations begins..."
            SUCCESS=$(curl -H "token: 0a1c2611-cffe-4f8c-8b6b-319e898662f1" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (( $SUCCESS == "1" ))
            then
              echo "roll back migration started"
              cd ~/project/backend
              npm install
              npm run migration:revert
              echo "roll back "
            fi
              echo "revert migrations finish..."
                 
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm install
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
              cd backend
              npm install
              npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-test]
      - run:
          name: Test front-end
          command: |
              cd frontend
              npm install
              npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test

                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-test]
      - run:
          name: Test back-end
          command: |
              cd backend
              npm install
              npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test
      
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run:
          name: Scan front-end
          command: |
              cd frontend
              npm install
              npm audit fix --audit-level=critical
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Back-end scan
          command: |
              cd backend
              npm install
              npm audit fix --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople 
      - run:
           name: Ensure front-end infrastructure exist
           command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
                --tags project=udapeople-frontend--${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Add back-end ip to ansible inventory
          command: |
              echo "[web]" >> .circleci/ansible/inventory.txt
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> inventory.txt
      - persist_to_workspace:
           root: ~/
           paths:
             - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure  

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a2:f3:59:4c:98:34:f0:18:e6:4b:c8:d2:25:3e:23:44"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
#            exit 1
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Run migrations
          no_output_timeout: 30m
          working_directory: ./backend
          command: |
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            cat ~/project/backend/migrations_dump.txt
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 0a1c2611-cffe-4f8c-8b6b-319e898662f1" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
#            exit 1
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
#        Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm ansible zip tar
            pip install awscli
# sudo apt update && sudo apt upgrade
# sudo apt install curl
# sudo apt-get install python-pip
# sudo pip install awscli
# aws --version
      - run:
          name: Get backend url
          command: |
              export BACKEND_PUBLIC_DNS=$(curl -H "token: a959d0f9-c2a8-448c-ae41-5e8ed7804900" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
              BACKEND_API_URL="http://${BACKEND_PUBLIC_DNS}:3030/api/status"
              echo "Backend API URL: "$BACKEND_API_URL
              echo ENVIRONMENT=production > "frontend/.env"
              echo NODE_ENV=production >> "frontend/.env"
              echo API_URL=$BACKEND_API_URL >> "frontend/.env" 

# export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
# export API_URL="http://${BACKEND_IP}:3030/api/status"
# echo "${API_URL}"
# echo API_URL="http://${BACKEND_IP}:3030/api/status" >> frontend/.env
# cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            cat .env
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
#       Here's where you will add some code to rollback on failure      
      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"        
          when: on_fail

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a2:f3:59:4c:98:34:f0:18:e6:4b:c8:d2:25:3e:23:44"]
      - attach_workspace:
          at: ~/
      - run:
          name: Set env
          command: |
            echo ENVIROMENT=$ENVIROMENT > "backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl nodejs npm tar gzip
            pip install awscli
      - run:
          name: Build backend files
          command: |
            cd backend
            npm i
            npm run build
            cp package* ./dist
            cd ..
#               Zip the directory
      - run:
          name: Compress dist files
          command: |
            tar -C backend -czvf artifact.tar.gz .
            pwd
            cd .circleci/ansible
      - run:
          name: Deploy backend
          command: |
            echo "Contents of the inventory.txt file is -------"
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml
      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"        
          when: on_fail
  
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
              apk add --update ansible curl nodejs npm
              pip install awscli
              apk update
              apk upgrade
              apk add curl
      # - run:
      #     name: Backend smoke test.
      #     command: |
      # export BACKEND_URL=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:Name,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --output text)
      # echo http://${BACKEND_URL}:3030/api/status
      # if 
      #   curl -s http://${BACKEND_URL}:3030/api/status | grep "ok"
      # then
      #   exit 0
      # else
      #   exit 1
      # fi
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_PUBLIC_DNS=$(curl -H "token: a959d0f9-c2a8-448c-ae41-5e8ed7804900" --request GET http://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            BACKEND_API_URL="http://${BACKEND_PUBLIC_DNS}:3030/api/status"
            echo "Backend API URL: "$BACKEND_API_URL
            echo ENVIRONMENT=production > "frontend/.env"
            echo NODE_ENV=production >> "frontend/.env"
            echo API_URL=$BACKEND_API_URL >> "frontend/.env"  
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
       # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"        
          when: on_fail

  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl nodejs npm
            pip install awscli
            apk update
            apk upgrade
            apk add curl
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      # Here's where you will add some code to rollback on failure  

      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
          when: on_fail
      - revert-migrations:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"        
          when: on_fail

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - run: yum install -y tar gzip
      # - attach_workspace:
      #     at: ~/
      # - run:
      #     name: Get old stack workflow id
      #     command: |
      #       export OldWorkflowID=$(aws cloudformation \
      #               list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
      #               --no-paginate --output text)
      #       export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
      #               --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
      #       echo Stack names: "${STACKS[@]}" 
      - run:
          name: Remove old stacks and files
          command: |
              aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
    

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [deploy-backend, deploy-frontend]
      # - cleanup:
      #     requires: [cloudfront-update]